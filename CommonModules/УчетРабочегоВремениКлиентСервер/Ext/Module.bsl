Функция ПроверитьУникальностьСтрок(Объект) Экспорт
	
	Ошибки = ""; 
    Отказ = Ложь; 
	
	Реквизиты = Объект.ПолучитьОбязательныеРеквизиты();
               
    Для каждого Реквизит Из Реквизиты Цикл
        Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда
            // имеем табличную часть
            ТабличнаяЧасть = Объект[Реквизит.Ключ]; 
							
            СписокНайденныхДублей = Новый СписокЗначений();
            // идем по табличной части
            Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
                // создадим структуру отбора для проверки уникальности реквизитов
                СтруктураОтбора = Новый Структура();
				
				Для каждого РеквизитТаблицы Из Реквизит.Значение Цикл
					// заполним структуру отбора для проверки уникальности реквизитов
					Если РеквизитТаблицы.Значение > 1 Тогда
						СтруктураОтбора.Вставить(СокрЛП(РеквизитТаблицы.Ключ),СтрокаТаблицы[РеквизитТаблицы.Ключ]);
					КонецЕсли;
				КонецЦикла;

                // проверка уникальности                    
                Если СписокНайденныхДублей.НайтиПоЗначению(СтрокаТаблицы)=Неопределено Тогда
                    // поищем строки удовлетворяющие структуре отбора
                    НайденныеСтроки=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
                    // если нашли и их больше 1, то строки не уникальные
                    Если НайденныеСтроки.Количество()>1 Тогда
                        // добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
                        Отказ = Истина;
                        ДублирующиесяСтроки=""; 
                        // выведем строку сообщения...
                        Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
                            ДублирующиесяСтроки=ДублирующиесяСтроки+","+СокрЛП(НайденнаяСтрока.НомерСтроки);
                            // добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
                            СписокНайденныхДублей.Добавить(НайденнаяСтрока);
                        КонецЦикла;                        
                        СтрокаРеквизитов="";
                        Для каждого РеквизитТаблицы Из СтруктураОтбора Цикл
                            СтрокаРеквизитов=СтрокаРеквизитов+?(ПустаяСтрока(СтрокаРеквизитов),"",",")+РеквизитТаблицы.Ключ;
                        КонецЦикла;
                        Ошибки=Ошибки+"Таблица <"+Реквизит.Ключ+"> значения колонки <"+РеквизитТаблицы.Ключ+"> не уникальны ! Строки: "+Сред(ДублирующиесяСтроки,2)+Символы.ПС;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;                                 
    КонецЦикла;
	
	Если Ошибки<>"" Тогда
		Сообщить(Ошибки);
	КонецЕсли;	
	
    Возврат Отказ;  
    
КонецФункции 

// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце
//
Функция КоличествоДнейМесяца(Дата) Экспорт
	Возврат День(КонецМесяца(Дата));
КонецФункции

Процедура ТабельУстановитьПериодДокумента(Форма) Экспорт
	
	Форма.Объект.ДатаНачалаПериода = НачалоМесяца(Форма.Объект.ПериодРегистрации);
	Форма.Объект.ДатаОкончанияПериода = КонецМесяца(Форма.Объект.ПериодРегистрации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Заполняет реквизит представлением месяца, хранящегося в другом реквизите.
//
// Параметры:
//		РедактируемыйОбъект
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

// Заполняет реквизиты представления месяцев, хранящихся в других реквизитах.
//
// Параметры:
//		ДанныеТабличнойЧасти - коллекция строк табличной части.
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДатеВТабличнойЧасти(ДанныеТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьМесяцПоДате(СтрокаТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления);
	КонецЦикла;
КонецПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

// Возвращает представление квартала по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеКвартала(ДатаНачалаМесяца) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачалаМесяца) Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат ПредставлениеПериода(ДатаНачалаМесяца, КонецКвартала(ДатаНачалаМесяца), "ФП = Истина");
	
КонецФункции



