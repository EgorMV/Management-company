#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОценкаПриСозданииНаСервере();
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;		
	КонецЕсли;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УчетРабочегоВремениКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");
КонецПроцедуры

&НаСервере
Процедура ОценкаПриСозданииНаСервере() Экспорт 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц", "Объект.ПериодРегистрации");
		
		УчетРабочегоВремениФормы.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаПериода)
			И Не ЗначениеЗаполнено(Объект.ДатаОкончанияПериода) Тогда
			УчетРабочегоВремениКлиентСервер.ТабельУстановитьПериодДокумента(ЭтаФорма);
		КонецЕсли;
		
		УчетРабочегоВремениКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСотрудниковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ВыработкаСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	КритерииОценок.Ссылка КАК Критерий,
	|	СУММА(ВЫБОР
	|			КОГДА ВыработкаСотрудниковОбороты.ДатаОкончания > КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|				ТОГДА РАЗНОСТЬДАТ(ВыработкаСотрудниковОбороты.ДатаНачала, КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ДЕНЬ) + 1
	|			КОГДА ВыработкаСотрудниковОбороты.ДатаНачала < &ПериодРегистрации
	|				ТОГДА РАЗНОСТЬДАТ(&ПериодРегистрации, ВыработкаСотрудниковОбороты.ДатаОкончания, ДЕНЬ) + 1
	|			ИНАЧЕ РАЗНОСТЬДАТ(ВыработкаСотрудниковОбороты.ДатаНачала, ВыработкаСотрудниковОбороты.ДатаОкончания, ДЕНЬ) + 1
	|		КОНЕЦ) КАК КоличествоСмен
	|ИЗ
	|	РегистрНакопления.ВыработкаСотрудников.Обороты(
	|			,
	|			,
	|			,
	|			Проект = &Проект
	|				И (ДатаНачала МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|					ИЛИ ДатаОкончания МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ))) КАК ВыработкаСотрудниковОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КритерииОценок КАК КритерииОценок
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудниковОбороты.Сотрудник,
	|	КритерииОценок.Ссылка
	|ИТОГИ
	|	СРЕДНЕЕ(КоличествоСмен)
	|ПО
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("Проект"				, Объект.Проект);
	Запрос.УстановитьПараметр("ПериодРегистрации"	, Объект.ПериодРегистрации);

	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		СтрокаСотр = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСотр, ВыборкаСотрудник);
		СтрокаСотр.КлючСтроки = Новый УникальныйИдентификатор;
		
		ВыборкаКритерий = ВыборкаСотрудник.Выбрать();
		Пока ВыборкаКритерий.Следующий() Цикл
			СтрокаКрит = Объект.Оценки.Добавить();
			СтрокаКрит.КритерийОценки = ВыборкаКритерий.Критерий;
			СтрокаКрит.КлючСтроки = СтрокаСотр.КлючСтроки;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	
	УчетРабочегоВремениКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Модифицированность);
	
	ПериодРегистрацииПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УчетРабочегоВремениКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление, Модифицированность);
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УчетРабочегоВремениКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УчетРабочегоВремениКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	УчетРабочегоВремениКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	УчетРабочегоВремениКлиентСервер.ТабельУстановитьПериодДокумента(ЭтаФорма);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблиц

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	Если Объект.Сотрудники.Количество()>0 Тогда		
		ТекСтрока = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = Объект.Сотрудники[0];
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.КлючСтроки) Тогда
			//Новая строка
			ТекСтрока.КлючСтроки = Новый УникальныйИдентификатор;
			ДобавитьКритерииОценки(ТекСтрока.КлючСтроки);
		КонецЕсли;
		
		Отбор = Новый ФиксированнаяСтруктура("КлючСтроки", ТекСтрока.КлючСтроки);
		Элементы.Оценки.ОтборСтрок = Отбор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	ОчиститьЗависимыеОценки();
КонецПроцедуры

&НаКлиенте
Процедура ОценкиОценкаПриИзменении(Элемент)
	
	РассчитатьСреднююОценку(Элементы.Оценки.ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПриАктивизацииСтроки(Элемент)
	
	Если Объект.Оценки.Количество()>0 Тогда
		ТекКритерий = Элементы.Оценки.ТекущиеДанные.КритерийОценки;
		ОценкиПриАктивизацииСтрокиНаСервере(ТекКритерий);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОценкиПриАктивизацииСтрокиНаСервере(ТекКритерий)
	
	УсловияОценки = "";	
	Для Каждого Стр Из ТекКритерий.УсловияОценок Цикл
		УсловияОценки = УсловияОценки+Стр.ОценкаМинимум+"-"+Стр.ОценкаМаксимум+" "+Стр.Условие+Символы.ПС;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Сотрудники.Очистить();
		Объект.Оценки.Очистить();
		ЗаполнитьСписокСотрудниковНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗависимыеОценки()
	
	Отбор = Новый Структура(Элементы.Оценки.ОтборСтрок);
	ИскСтроки = Объект.Оценки.НайтиСтроки(Отбор);
	
	Для Каждого ТекСтрока Из ИскСтроки Цикл
		Объект.Оценки.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКритерииОценки(КлючСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КритерииОценок.Ссылка КАК Критерий
	|ИЗ
	|	Справочник.КритерииОценок КАК КритерииОценок
	|ГДЕ
	|	КритерииОценок.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КритерииОценок.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НСтрока = Объект.Оценки.Добавить();
		НСтрока.КритерийОценки = Выборка.Критерий;
		НСтрока.КлючСтроки = КлючСтроки;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднююОценку(КлючСтроки)
	
	ИскСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	ТекСотрудник = ИскСтроки[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.КритерийОценки,
	|	Т.Оценка,
	|	ВЫРАЗИТЬ(Т.КлючСтроки КАК СТРОКА(32)) КАК КлючСтроки
	|ПОМЕСТИТЬ ВТ_Оценки
	|ИЗ
	|	&ТЗ_Оценки КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Оценки.Оценка * КритерииОценокРаспределение.ВесКритерия) КАК ОценкаИтоговая
	|ИЗ
	|	ВТ_Оценки КАК ВТ_Оценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КритерииОценок.Распределение КАК КритерииОценокРаспределение
	|		ПО ВТ_Оценки.КритерийОценки = КритерииОценокРаспределение.Ссылка
	|			И (КритерииОценокРаспределение.УровеньКвалификации = &УровеньКвалификации)
	|ГДЕ
	|	ВТ_Оценки.КлючСтроки = &КлючСтроки"; 
	
	Запрос.УстановитьПараметр("УровеньКвалификации"	, ТекСотрудник.Сотрудник.УровеньКвалификации);
	Запрос.УстановитьПараметр("КлючСтроки"			, КлючСтроки);
	Запрос.УстановитьПараметр("ТЗ_Оценки"			, Объект.Оценки.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекСотрудник.ОценкаИтоговая = Выборка.ОценкаИтоговая;	
	КонецЕсли;
	КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//ТЧ.Оценки
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ОценкиОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 1, , Истина);
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 3, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
			
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ОценкиОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 4, , Истина);
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 5, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Голубой);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ОценкиОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 6, , Истина);
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 7, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ОценкиОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 8, , Истина);
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Оценки.Оценка", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 10, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
	
	//ТЧ.Сотрудники
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "СотрудникиСредняяОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 1, , Истина);
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.Меньше, 4, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
			
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "СотрудникиСредняяОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 4, , Истина);
	ДобавитьЭлементКомпоновки(ГруппаЭлементов, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.Меньше, 6, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Голубой);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "СотрудникиСредняяОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 6, , Истина);
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.Меньше, 8, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "СотрудникиСредняяОценка");
	ГруппаЭлементов = ДобавитьГруппуЭлементовКомпоновки(ЭлементОформления.Отбор, "ГруппаИ");
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 8, , Истина);
	ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Объект.Сотрудники.ОценкаИтоговая", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 10, , Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);

	
КонецПроцедуры

&НаСервере
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
    
    ПолеЭлемента         = КоллекцияОформляемыхПолей.Элементы.Добавить();
    ПолеЭлемента.Поле    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ПолеЭлемента.Использование = Истина;

    Возврат ПолеЭлемента;
    
КонецФункции

&НаСервере
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
                                    Знач ИмяПоля,
                                    Знач ВидСравнения,
                                    Знач ПравоеЗначение = Неопределено,
                                    Знач Представление  = Неопределено,
                                    Знач Использование  = Неопределено,
                                    знач РежимОтображения = Неопределено,
                                    знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
    
    Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
    Элемент.ВидСравнения = ВидСравнения;
    
    Если РежимОтображения = Неопределено Тогда
        Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    Иначе
        Элемент.РежимОтображения = РежимОтображения;
    КонецЕсли;
    
    Если ПравоеЗначение <> Неопределено Тогда
        Элемент.ПравоеЗначение = ПравоеЗначение;
    КонецЕсли;
    
    Если Представление <> Неопределено Тогда
        Элемент.Представление = Представление;
    КонецЕсли;
    
    Если Использование <> Неопределено Тогда
        Элемент.Использование = Использование;
    КонецЕсли;
    
    // Важно: установка идентификатора должна выполняться
    // в конце настройки элемента, иначе он будет скопирован
    // в пользовательские настройки частично заполненным.
    Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
        Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
    ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
        Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
    КонецЕсли;
    
    Возврат Элемент;
    
КонецФункции

&НаСервере
Функция ДобавитьГруппуЭлементовКомпоновки(ОбластьДобавления, ТипГруппы)
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных[ТипГруппы];
	
	Возврат Элемент;

КонецФункции

#КонецОбласти

#Область ОбработчкиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	Если Объект.Сотрудники.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);	
 
		ПоказатьВопрос(Оповещение, "Список сотрудников и их оценок будет очищен. Продолжить?",
			РежимДиалогаВопрос.ДаНетОтмена,
	        0, // таймаут в секундах
			КодВозвратаДиалога.Да, //кнопка по умолчанию
	    	);
	Иначе
		ЗаполнитьСписокСотрудниковНаСервере();	
	КонецЕсли;
	СотрудникиПриАктивизацииСтроки(Элементы.Сотрудники);
	
КонецПроцедуры


#КонецОбласти




