
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;		
		
		Объект.ДатаНачалаРабот = ТекущаяДата();
		Объект.ДатаОкончанияРабот = ТекущаяДата();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.РаспределениеПоРаботам.Видимость = Ложь;
	УстановитьПериодРаботы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьНаСуммуПроцентов(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсполнители

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.РаспределениеПоРаботам.Количество()>0 Тогда
		Отказ = Истина;
		ПроверитьНаОтказДобавленияСтроки("Исполнители", Элемент.ТекущиеДанные.НомерСтроки, "Добавление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Объект.РаспределениеПоРаботам.Количество()>0 Тогда
		Отказ = Истина;
		ПроверитьНаОтказДобавленияСтроки("Исполнители", Элемент.ТекущиеДанные.НомерСтроки, "Удаление");			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	РассчитатьРаспределение();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)

	РассчитатьРаспределение();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьУникальностьИсполнителя(ВыбранноеЗначение) Тогда
		НСтрока = Объект.Исполнители.Добавить();
		НСтрока.Исполнитель = ВыбранноеЗначение;
		РассчитатьРаспределение();		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если НЕ ПроверитьУникальностьИсполнителя(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыРаспределение

&НаКлиенте
Процедура РаспределениеПоРаботамПроцентУчастияПриИзменении(Элемент)
	
	ОбновитьИтоговуюСуммуПроцентов(Элементы.РаспределениеПоРаботам.ТекущиеДанные);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыРаботы

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока<>Неопределено И ТекСтрока.ИдентификаторРаботы <> "" Тогда
		Отбор = Новый ФиксированнаяСтруктура("ИдентификаторРаботы", ТекСтрока.ИдентификаторРаботы);	
		Элементы.РаспределениеПоРаботам.ОтборСтрок = Отбор;
		
		ОбновитьИтоговуюСуммуПроцентов(ТекСтрока);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Работы.ТекущаяСтрока;
	ЗаполнитьСтрокуРаботы(ТекСтрока);
	РаботыПриАктивизацииСтроки(Элементы.Работы);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
		
	ОчиститьРаспределениеПоРаботе(Элемент.ТекущиеДанные.ИдентификаторРаботы);
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботыОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура РаботыОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого Стр Из ВыбранноеЗначение Цикл
			Если НЕ Стр.ЭтоГруппа Тогда
				НСтрока = Объект.Работы.Добавить();
		    	НСтрока.Работа = Стр;
				ЗаполнитьСтрокуРаботы(НСтрока);
			Иначе
				ДобавитьРаботыИзГруппы(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура БригадирПриИзменении(Элемент)
	
	ОбновитьСписокИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРаботыПриИзменении(Элемент)
	
	Объект.ДатаНачалаРабот = ПериодРаботы.ДатаНачала;
	Объект.ДатаОкончанияРабот = ПериодРаботы.ДатаОкончания;
	
	УстановитьОбъемыВыполненныхРабот();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандныхПанелей

&НаКлиенте
Процедура ПоказатьТаблицуРаспределения(Команда)
	
	ПоказатьРаспределение = Элементы.РаботыКоманднаяПанель.ПодчиненныеЭлементы.РаботыПоказатьТаблицуРаспределения.Пометка;

	Элементы.РаботыКоманднаяПанель.ПодчиненныеЭлементы.РаботыПоказатьТаблицуРаспределения.Пометка = НЕ ПоказатьРаспределение;
	
	Элементы.РаспределениеПоРаботам.Видимость = НЕ ПоказатьРаспределение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРабот(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Объект.Проект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Справочник.РеестрыРабот.ФормаВыбора", ПараметрыФормы, Элементы.Работы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителей(Команда)
	
	Если Объект.РаспределениеПоРаботам.Количество()>0 Тогда
		Отказ = Истина;
		ПроверитьНаОтказДобавленияСтроки("Исполнители", Неопределено, "Добавление");
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Элементы.Исполнители);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаКлиенте
Процедура ПроверитьНаОтказДобавленияСтроки(ТабличнаяЧасть, НомерСтроки, Действие)
	
	Если Действие = "Добавление" Тогда
		ИмяПроцедуры = "ПослеЗакрытияВопросаНаДобавление";
	Иначе	
		ИмяПроцедуры = "ПослеЗакрытияВопросаНаУдаление";
	КонецЕсли;
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВопроса.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ПараметрыВопроса);	
		ПоказатьВопрос(Оповещение, "Будут пересчитаны проценты по работам. Продолжить?",
		РежимДиалогаВопрос.ДаНетОтмена,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, //кнопка по умолчанию
	);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаДобавление(Результат, ПараметрыВопроса) Экспорт		
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПараметрыВопроса.НомерСтроки = Неопределено Тогда
			//значит добавляем через подбор
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
			ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Элементы.Исполнители);
		Иначе	
			Объект.Исполнители.Добавить();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаУдаление(Результат, ПараметрыВопроса) Экспорт		
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ПараметрыВопроса.ТабличнаяЧасть].Удалить(ПараметрыВопроса.НомерСтроки-1);
		Объект.РаспределениеПоРаботам.Очистить();
		РассчитатьРаспределение();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСуммуПроцентов(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работы.Работа,
	|	Работы.ИдентификаторРаботы
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	&Работы КАК Работы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распределение.ИдентификаторРаботы,
	|	Распределение.ПроцентУчастия
	|ПОМЕСТИТЬ ВТ_Распределение
	|ИЗ
	|	&Распределение КАК Распределение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Работы.Работа,
	|	СУММА(ВТ_Распределение.ПроцентУчастия) КАК ПроцентУчастия
	|ИЗ
	|	ВТ_Работы КАК ВТ_Работы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Распределение КАК ВТ_Распределение
	|		ПО ВТ_Работы.ИдентификаторРаботы = ВТ_Распределение.ИдентификаторРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Работы.Работа
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Распределение.ПроцентУчастия) <> 100";
	
	Запрос.УстановитьПараметр("Работы"			, Объект.Работы.Выгрузить());
	Запрос.УстановитьПараметр("Распределение"	, Объект.РаспределениеПоРаботам.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("Неверно установлены проценты по работе <"+Выборка.Работа+">");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУникальностьИсполнителя(НовыйИсполнитель)
	
	Возврат Объект.Исполнители.НайтиСтроки(Новый Структура("Исполнитель", НовыйИсполнитель)).Количество() = 0;
		
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокИсполнителей()
	
	Если НЕ Объект.Бригадир.Пустая() Тогда
		ИскСтроки = Объект.Исполнители.НайтиСтроки(Новый Структура("Исполнитель", Объект.Бригадир));
		Если ИскСтроки.Количество() = 0 Тогда
			НСтрока = Объект.Исполнители.Добавить();
			НСтрока.Исполнитель = Объект.Бригадир;			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодРаботы()
	
	ПериодРаботы.ДатаНачала = Объект.ДатаНачалаРабот;
	ПериодРаботы.ДатаОкончания = Объект.ДатаОкончанияРабот;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьОбъемыВыполненныхРабот()
	
	//установим объем выполненного на дату начала работ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекРаботы.Работа КАК Работа
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	&ТекРаботы КАК ТекРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Работы.Работа КАК Работа,
	|	ЕСТЬNULL(ВыполненныеРаботыОбороты.КоличествоОборот, 0) КАК ВыполненоНаНачало
	|ИЗ
	|	ВТ_Работы КАК ВТ_Работы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыполненныеРаботы.Обороты(
	|				,
	|				&Дата,
	|				,
	|				Работа В
	|					(ВЫБРАТЬ
	|						Т.Работа
	|					ИЗ
	|						ВТ_Работы КАК Т)) КАК ВыполненныеРаботыОбороты
	|		ПО ВТ_Работы.Работа = ВыполненныеРаботыОбороты.Работа";
	
	Запрос.УстановитьПараметр("Дата"		, Объект.ДатаНачалаРабот);
	Запрос.УстановитьПараметр("ТекРаботы"   , Объект.Работы.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого Стр Из Объект.Работы Цикл
			Если Выборка.Работа = Стр.Работа Тогда
				Стр.ВыполненоНаНачало = Выборка.ВыполненоНаНачало;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	
	
#КонецОбласти

#Область РаспределениеРабот

&НаСервере
Процедура ДобавитьРаботыИзГруппы(ГруппаРабот)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрыРабот.Ссылка
	|ИЗ
	|	Справочник.РеестрыРабот КАК РеестрыРабот
	|ГДЕ
	|	РеестрыРабот.Родитель = &Родитель
	|	И РеестрыРабот.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Родитель", ГруппаРабот);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НСтрока = Объект.Работы.Добавить();
		    НСтрока.Работа = Выборка.Ссылка;
			ЗаполнитьСтрокуРаботы(НСтрока);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуРаботы(СтрокаРабот)
	
	Если ТипЗнч(СтрокаРабот) = Тип("Число") Тогда
		СтрокаРаботСервер = Объект.Работы.НайтиПоИдентификатору(СтрокаРабот);
	Иначе
		СтрокаРаботСервер = СтрокаРабот;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СтрокаРаботСервер.ИдентификаторРаботы) Тогда
		СтрокаРаботСервер.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;	
	СтрокаРаботСервер.Комментарий = "";
	
	//установим объем выполненного на дату начала работ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполненныеРаботыОбороты.КоличествоОборот КАК ВыполненоНаНачало
	|ИЗ
	|	РегистрНакопления.ВыполненныеРаботы.Обороты(, &Дата, , Работа = &Работа) КАК ВыполненныеРаботыОбороты";
	
	Запрос.УстановитьПараметр("Дата"	, Объект.ДатаНачалаРабот);
	Запрос.УстановитьПараметр("Работа"  , СтрокаРаботСервер.Работа);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтрокаРаботСервер.ВыполненоНаНачало = Выборка.ВыполненоНаНачало;
	КонецЕсли;	
		
	ДобавитьРаботуВРаспределение(СтрокаРаботСервер);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботуВРаспределение(СтрокаРабот)
	
	ИдентификаторРаботы = СтрокаРабот.ИдентификаторРаботы;
	ОчиститьРаспределениеПоРаботе(ИдентификаторРаботы);
	
	//не будем добавлять данные по пустой работе
	Если СтрокаРабот.Работа.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СуммаПроцентов = 100;
	ПроцентУчастия = Окр(СуммаПроцентов/Объект.Исполнители.Количество(),2);
	
	Для Сч = 0 По Объект.Исполнители.Количество()-1 Цикл
		
		ТекИсполнитель = Объект.Исполнители.Получить(Сч).Исполнитель;
		
		НСтрока = Объект.РаспределениеПоРаботам.Добавить();
		НСтрока.ИдентификаторРаботы = ИдентификаторРаботы;
		НСтрока.Исполнитель 		= ТекИсполнитель;
		НСтрока.ПроцентУчастия 		= ?(Сч = Объект.Исполнители.Количество()-1 И СуммаПроцентов>ПроцентУчастия, СуммаПроцентов, ПроцентУчастия);
		
		СуммаПроцентов = СуммаПроцентов-ПроцентУчастия;
						
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура РассчитатьРаспределение()
	
	Для Каждого Стр Из Объект.Работы Цикл
		ДобавитьРаботуВРаспределение(Стр);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРаспределениеПоРаботе(ИдентификаторРаботы)
	
	ИскСтроки = Объект.РаспределениеПоРаботам.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	
	Если ИскСтроки.Количество()>0 Тогда
		Для Каждого Стр Из ИскСтроки Цикл
			Объект.РаспределениеПоРаботам.Удалить(Стр);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговуюСуммуПроцентов(ТекСтрока)
	
	Отбор = Новый Структура("ИдентификаторРаботы", ТекСтрока.ИдентификаторРаботы);	
	СуммаПодвала = 0;
	ИскСтроки = Объект.РаспределениеПоРаботам.НайтиСтроки(Отбор);
	Для Каждого Стр Из ИскСтроки Цикл
		СуммаПодвала = СуммаПодвала+Стр.ПроцентУчастия;
	КонецЦикла;
	Если СуммаПодвала<>100 Тогда
		Элементы.РаспределениеПоРаботамПроцентУчастия.ЦветТекстаПодвала = WEBЦвета.Красный;
	Иначе
		Элементы.РаспределениеПоРаботамПроцентУчастия.ЦветТекстаПодвала = WEBЦвета.Зеленый;
	КонецЕсли;
	Элементы.РаспределениеПоРаботамПроцентУчастия.ТекстПодвала = СуммаПодвала;
	
КонецПроцедуры


#КонецОбласти

#Область ОтправкаПочты

&НаСервере
Функция СформироватьПараметрыПисьмаНаСервере()
	
	//Получим печатную форму "Заказ-наряд"
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	ФормаЗаказНаряда = Документы.ВедомостьРабот.ПечатьЗаказНаряда(МассивОбъектов);
	
	//Получим адресатов
	Адресаты = СформироватьСписокПолучателейНаСервере();	

	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("ФормаЗаказНаряда", ФормаЗаказНаряда);
	ПараметрыПисьма.Вставить("Получатели", Адресаты.МассивПолучателей);
	ПараметрыПисьма.Вставить("ПолучателиКопии", Адресаты.МассивПолучателейКопии);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция СформироватьСписокПолучателейНаСервере()
	
	МассивПолучателей = Новый Массив;
	МассивПолучателейКопии = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьРабот.Проект.Ответственный КАК Сотрудник,
	|	ВедомостьРабот.Проект.Ответственный.ЭлектронныйАдрес КАК ЭлектронныйАдрес
	|ИЗ
	|	Документ.ВедомостьРабот КАК ВедомостьРабот
	|ГДЕ
	|	ВедомостьРабот.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОтветственныеЗаПроверку.Сотрудник.Наименование КАК Сотрудник,
	|	СотрудникиОтветственныеЗаПроверку.Сотрудник.ЭлектронныйАдрес КАК ЭлектронныйАдрес
	|ИЗ
	|	РегистрСведений.СотрудникиОтветственныеЗаПроверку КАК СотрудникиОтветственныеЗаПроверку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНарядИсполнители.Исполнитель.Ссылка,
	|	ЗаказНарядИсполнители.Исполнитель.ЭлектронныйАдрес
	|ИЗ
	|	Документ.ВедомостьРабот.Исполнители КАК ЗаказНарядИсполнители
	|ГДЕ
	|	ЗаказНарядИсполнители.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОсновные = Результат[0].Выбрать();
	Пока ВыборкаОсновные.Следующий() Цикл
		СтруктураПолучателей = Новый Структура;
		СтруктураПолучателей.Вставить("Выбран"			, Истина);
		СтруктураПолучателей.Вставить("Представление"	, ВыборкаОсновные.Сотрудник);
		СтруктураПолучателей.Вставить("Адрес"			, ВыборкаОсновные.ЭлектронныйАдрес);
		МассивПолучателей.Добавить(СтруктураПолучателей);	
	КонецЦикла;
	
	ВыборкаКопии = Результат[1].Выбрать();
	Пока ВыборкаКопии.Следующий() Цикл
		СтруктураПолучателей = Новый Структура;
		СтруктураПолучателей.Вставить("Выбран"			, Истина);
		СтруктураПолучателей.Вставить("Представление"	, ВыборкаКопии.Сотрудник);
		СтруктураПолучателей.Вставить("Адрес"			, ВыборкаКопии.ЭлектронныйАдрес);
		МассивПолучателейКопии.Добавить(СтруктураПолучателей);	
	КонецЦикла;
	
	Адресаты = Новый Структура("МассивПолучателей, МассивПолучателейКопии", МассивПолучателей, МассивПолучателейКопии);
	
	Возврат Адресаты;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	ПараметрыПисьма = СформироватьПараметрыПисьмаНаСервере();
	ПоказатьДиалогОтправкиПоЭлектроннойПочте(ПараметрыПисьма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте(ПараметрыПисьма)
	
	ОтчетНаименованиеТекущегоВарианта = "Заказ-наряд";
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ПараметрыПисьма.ФормаЗаказНаряда, ОтчетНаименованиеТекущегоВарианта);
	
	ЗаголовокСохранения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), ОтчетНаименованиеТекущегоВарианта);
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Тема"			, "Выполненные работы по проекту "+Объект.Проект);
	ПараметрыОтправки.Вставить("Получатель"		, ПараметрыПисьма.Получатели);
	ПараметрыОтправки.Вставить("ПолучательКопии", ПараметрыПисьма.ПолучателиКопии);
	ПараметрыОтправки.Вставить("Тело"			, "Здравствуйте, "+Формат(Объект.Дата, "ДФ=dd.MM.yyyy")+" на проекте "+Объект.Проект+" выполнены следующие работы:");
	ПараметрыОтправки.Вставить("ФорматОтправки" , "HTML");
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.ОтправитьТабличныеДокументы(ТабличныеДокументы, ЗаголовокСохранения, ПараметрыОтправки);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать























	
	
	





























